<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Welcome</title>
    <url>/2020/12/11/hello-world/</url>
    <content><![CDATA[<p>欢迎来到菜鸡 <font color=0xaaaaaa>crystal302</font> 的博客。</p>
<p>玩的开心。</p>
]]></content>
  </entry>
  <entry>
    <title>20/12/20 五校联考</title>
    <url>/2020/12/21/201220/</url>
    <content><![CDATA[<p>抓猫/摸鱼/人民摸鱼家</p>
<a id="more"></a>
<h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><p>Codeforces 97E</p>
<h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><p>咕咕咕。</p>
<h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p>有 $k$ 个迷宫。每个迷宫的起点分别为 $sx_i,sy_i$，终点分别为 $tx_i,ty_j$。有 $k$ 条鱼依次位于这 $k$ 个起点。</p>
<p>每一秒每一条与可以选择向上下左右的其中一个方向移动一格，也可以不动。如果任意时刻所有 $k$ 条鱼在同一位置，它们可以选择合体。合体的鱼将能通过任意一条鱼所能通过的位置（相当于所有迷宫可行走位置的并）。它们任意时刻都可以选择解体。</p>
<p>求所有鱼在最优策略下，至少需要多少时间才能到达各自的终点。如果不能，则求出至多有多少条鱼能到达各自的终点。</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>显然这些鱼最多只会合体一次。最优的轨迹一定是所有鱼从格子起点到达一个位置合体，然后移动到另一个位置解体，最后到达各自的终点（或者不合体直接到各自的终点）。预处理出所有鱼从起点集中到一个点的最远距离 $disS_{x,y}$，以及所有鱼从一个点分散到终点的最远距离 $disT_{x,y}$。显然可以建图跑最短路。具体地，从源点建长度为 $disS_{x,y}$ 的边到各点，从各点建长度为 $disT_{x,y}$ 的边到汇点，各点间建合体鱼能走的边构成的网格图。跑源点到汇点的最短路即可。如果结果为 inf，说明答案为 No，此时再简单计算最多的鱼条数即可。</p>
<p><strong>注意细节。</strong></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">char</span> ch=getchar();</span><br><span class="line">	<span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span> || ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=-f;</span><br><span class="line">		ch=getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (ch&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">		x=x*<span class="number">10</span>+ch<span class="number">-48</span>;</span><br><span class="line">		ch=getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">210</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k,etot;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">6</span>][N][N],sx[N],sy[N],tx[N],ty[N],disS[N][N],disT[N][N],dis[N][N],dis2[N*N*<span class="number">2</span>],sumS[N][N],sumT[N][N];</span><br><span class="line"><span class="keyword">int</span> ea[N*N*<span class="number">10</span>],eb[N*N*<span class="number">10</span>],ec[N*N*<span class="number">2</span>],ed[N*N*<span class="number">10</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[N*N*<span class="number">2</span>],vis2[N][N];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[<span class="number">4</span>]=&#123;<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rar</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (x<span class="number">-1</span>)*m+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line">	etot++;ea[etot]=y;eb[etot]=ec[x];ec[x]=etot;ed[etot]=z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getdis</span><span class="params">(<span class="keyword">int</span> t,<span class="keyword">int</span> sx,<span class="keyword">int</span> sy)</span></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dis));</span><br><span class="line">	<span class="built_in">queue</span> &lt; <span class="built_in">pair</span> &lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; q;</span><br><span class="line">	dis[sx][sy]=<span class="number">0</span>;q.push(<span class="built_in">make_pair</span>(sx,sy));</span><br><span class="line">	<span class="keyword">if</span> (!f[t][sx][sy]) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">while</span> (!q.empty())&#123;</span><br><span class="line">		<span class="keyword">int</span> x=q.front().first,y=q.front().second;q.pop();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;++i)&#123;</span><br><span class="line">			<span class="keyword">int</span> xx=x+dx[i],yy=y+dy[i];</span><br><span class="line">			<span class="keyword">if</span> (xx&gt;<span class="number">0</span> &amp;&amp; yy&gt;<span class="number">0</span> &amp;&amp; xx&lt;=n &amp;&amp; yy&lt;=m &amp;&amp; f[t][xx][yy] &amp;&amp; dis[x][y]+<span class="number">1</span>&lt;dis[xx][yy])&#123;</span><br><span class="line">				dis[xx][yy]=dis[x][y]+<span class="number">1</span>;</span><br><span class="line">				q.push(<span class="built_in">make_pair</span>(xx,yy));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> S,<span class="keyword">int</span> T)</span></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(dis2,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dis2));</span><br><span class="line">	<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">	<span class="built_in">priority_queue</span> &lt; <span class="built_in">pair</span> &lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; q;</span><br><span class="line">	dis2[S]=<span class="number">0</span>;q.push(<span class="built_in">make_pair</span>(<span class="number">0</span>,S));</span><br><span class="line">	<span class="keyword">while</span> (!q.empty())&#123;</span><br><span class="line">		<span class="keyword">int</span> x=q.top().second;q.pop();</span><br><span class="line">		<span class="keyword">if</span> (vis[x]) <span class="keyword">continue</span>;</span><br><span class="line">		vis[x]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=ec[x];i;i=eb[i])&#123;</span><br><span class="line">			<span class="keyword">int</span> y=ea[i],z=ed[i];</span><br><span class="line">			<span class="keyword">if</span> (dis2[y]&gt;dis2[x]+z)&#123;</span><br><span class="line">				dis2[y]=dis2[x]+z;</span><br><span class="line">				q.push(<span class="built_in">make_pair</span>(-dis2[y],y));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dis2[T];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">memset</span>(vis2,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis2));</span><br><span class="line">	<span class="built_in">queue</span> &lt; <span class="built_in">pair</span> &lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; q;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)&#123;</span><br><span class="line">			<span class="keyword">if</span> (sumS[i][j]==k &amp;&amp; f[<span class="number">0</span>][i][j])&#123;</span><br><span class="line">				q.push(<span class="built_in">make_pair</span>(i,j));</span><br><span class="line">				vis2[i][j]=<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (!q.empty())&#123;</span><br><span class="line">		<span class="keyword">int</span> x=q.front().first,y=q.front().second;q.pop();</span><br><span class="line">		res=max(res,sumT[x][y]);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;++i)&#123;</span><br><span class="line">			<span class="keyword">int</span> xx=x+dx[i],yy=y+dy[i];</span><br><span class="line">			<span class="keyword">if</span> (xx&gt;<span class="number">0</span> &amp;&amp; yy&gt;<span class="number">0</span> &amp;&amp; xx&lt;=n &amp;&amp; yy&lt;=m &amp;&amp; !vis2[xx][yy] &amp;&amp; f[<span class="number">0</span>][xx][yy])&#123;</span><br><span class="line">				vis2[xx][yy]=<span class="number">1</span>;q.push(<span class="built_in">make_pair</span>(xx,yy));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	freopen(<span class="string">&quot;fish.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">	freopen(<span class="string">&quot;fish.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">	<span class="keyword">int</span> T=read();</span><br><span class="line">	<span class="keyword">while</span> (T --&gt; <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(ec,<span class="number">0</span>,<span class="keyword">sizeof</span>(ec));etot=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">		n=read(),m=read(),k=read();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)&#123;</span><br><span class="line">				<span class="keyword">int</span> x=read();<span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> t=<span class="number">1</span>;t&lt;=k;++t)&#123;</span><br><span class="line">					<span class="keyword">if</span> (!(x&amp;(<span class="number">1</span>&lt;&lt;(t<span class="number">-1</span>))))&#123;</span><br><span class="line">						f[t][i][j]=<span class="number">1</span>;flag=<span class="number">1</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				f[<span class="number">0</span>][i][j]=flag;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> t=<span class="number">1</span>;t&lt;=k;++t)&#123;</span><br><span class="line">			sx[t]=read();sy[t]=read();tx[t]=read();ty[t]=read();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>,cnt=k;</span><br><span class="line">		<span class="built_in">memset</span>(disS,<span class="number">0</span>,<span class="keyword">sizeof</span>(disS));</span><br><span class="line">		<span class="built_in">memset</span>(disT,<span class="number">0</span>,<span class="keyword">sizeof</span>(disT));</span><br><span class="line">		<span class="built_in">memset</span>(sumS,<span class="number">0</span>,<span class="keyword">sizeof</span>(sumS));</span><br><span class="line">		<span class="built_in">memset</span>(sumT,<span class="number">0</span>,<span class="keyword">sizeof</span>(sumT));</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> t=<span class="number">1</span>;t&lt;=k;++t)&#123;</span><br><span class="line">			getdis(t,sx[t],sy[t]);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)&#123;</span><br><span class="line">					disS[i][j]=max(disS[i][j],dis[i][j]);</span><br><span class="line">					<span class="keyword">if</span> (dis[i][j]!=inf) sumS[i][j]++; </span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (dis[tx[t]][ty[t]]==inf) cnt--;</span><br><span class="line">			ans=max(ans,dis[tx[t]][ty[t]]);</span><br><span class="line">			getdis(t,tx[t],ty[t]);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)&#123;</span><br><span class="line">					disT[i][j]=max(disT[i][j],dis[i][j]);</span><br><span class="line">					<span class="keyword">if</span> (dis[i][j]!=inf) sumT[i][j]++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> S=n*m+<span class="number">1</span>,T=n*m+<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)&#123;</span><br><span class="line">				<span class="keyword">if</span> (f[<span class="number">0</span>][i][j])&#123;</span><br><span class="line">					<span class="keyword">if</span> (disS[i][j]!=inf) addEdge(S,rar(i,j),disS[i][j]);</span><br><span class="line">					<span class="keyword">if</span> (disT[i][j]!=inf) addEdge(rar(i,j),T,disT[i][j]);</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> p=<span class="number">0</span>;p&lt;<span class="number">4</span>;++p)&#123;</span><br><span class="line">						<span class="keyword">int</span> x=i+dx[p],y=j+dy[p];</span><br><span class="line">						<span class="keyword">if</span> (x&gt;<span class="number">0</span> &amp;&amp; j&gt;<span class="number">0</span> &amp;&amp; x&lt;=n &amp;&amp; y&lt;=m &amp;&amp; f[<span class="number">0</span>][x][y]) addEdge(rar(i,j),rar(x,y),<span class="number">1</span>);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		ans=min(ans,dijkstra(S,T));</span><br><span class="line">		<span class="keyword">if</span> (ans!=inf)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;YES\n%d\n&quot;</span>,ans);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			cnt=max(cnt,solve());</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;NO\n%d\n&quot;</span>,cnt);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	fclose(<span class="built_in">stdin</span>);</span><br><span class="line">	fclose(<span class="built_in">stdout</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>五校联考</tag>
        <tag>省选模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>20/12/19 下午</title>
    <url>/2020/12/21/201219/</url>
    <content><![CDATA[<p>相框/Cow Steeplechase/Plan of Lectures</p>
<a id="more"></a>
<h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p>有两个相框，相框定义为一个大矩形内部挖去一个小矩形。这两个相框不能旋转，只能平移，求它们最大相交面积。</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>最优解一定是两个相框有一个顶点重合（每个相框有八个顶点）。计算一下即可。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>咕咕咕。</p>
<h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><p>Luogu P5428</p>
<h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><p>Codeforces 1463E</p>
]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>提高模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>20/12/16 晚</title>
    <url>/2020/12/21/201216/</url>
    <content><![CDATA[<p>坐标系/图/还是图/字符串</p>
<a id="more"></a>
<h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p>平面上有两条平行的直线，一条直线上有 $n$ 个黑点，另一条直线上有 $m$ 个红点。每个黑点需要寻找一个距离它直线距离最近的一个红点匹配。如果存在有两个黑点匹配到的红点相同，且其中一个黑点距离该红点的距离更近，则另外一个黑点是不高兴的。求不高兴黑点的最小值。</p>
<p>$n,m\leq 10^5$。</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>显然可以贪心。每个黑点至多只会在两个红点中选一个。如果选中左边的点不会使当前黑点不高兴就选，否则就选右边的。容易证明这个策略是正确的。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200010</span>;</span><br><span class="line"><span class="keyword">int</span> a[N],b[N],c[N],dis[N],ans;</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!vis[y])&#123;</span><br><span class="line">		vis[y]=<span class="number">1</span>;ans++;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span> (dis[y]==<span class="built_in">abs</span>(a[x]-b[y]))&#123;</span><br><span class="line">		ans++;</span><br><span class="line">	&#125;</span><br><span class="line">	dis[y]=<span class="built_in">abs</span>(a[x]-b[y]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">char</span> ch=getchar();</span><br><span class="line">	<span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span> || ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=-f;</span><br><span class="line">		ch=getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (ch&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">		x=x*<span class="number">10</span>+ch<span class="number">-48</span>;</span><br><span class="line">		ch=getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	freopen(<span class="string">&quot;a.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">	freopen(<span class="string">&quot;a.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">	<span class="keyword">int</span> n=read(),m=read();read();read();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) a[i]=read();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) b[i]=read();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) c[i]=lower_bound(b+<span class="number">1</span>,b+<span class="number">1</span>+m,a[i])-b<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		<span class="keyword">if</span> (c[i]==m) calc(i,m);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (c[i]==<span class="number">0</span>) calc(i,<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (a[i]-b[c[i]]&lt;b[c[i]+<span class="number">1</span>]-a[i]) calc(i,c[i]);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (a[i]-b[c[i]]&gt;b[c[i]+<span class="number">1</span>]-a[i]) calc(i,c[i]+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (!vis[c[i]] || dis[c[i]]==a[i]-b[c[i]]) calc(i,c[i]);</span><br><span class="line">			<span class="keyword">else</span> calc(i,c[i]+<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;n-ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	fclose(<span class="built_in">stdin</span>);</span><br><span class="line">	fclose(<span class="built_in">stdout</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><h3 id="题面-1"><a href="#题面-1" class="headerlink" title="题面"></a>题面</h3><p>给无向图黑白染色，要求对于任意两个颜色相同的点，有一条边直接相连。</p>
<p>最小化连接相同颜色点的边的数量。</p>
<p>$n\leq 700$。</p>
<h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>题目等价于：将一张无向图分解成两个团，使得它们的大小尽可能接近。</p>
<p>这就和 uva1627 相同。</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">710</span>;</span><br><span class="line"><span class="keyword">bool</span> f[N][N&lt;&lt;<span class="number">1</span>],g[N][N];</span><br><span class="line"><span class="keyword">int</span> d[N],col[N],n,idx;</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; vec[N][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">	col[x]=c;vec[idx][c<span class="number">-1</span>].push_back(x);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> y=<span class="number">0</span>;y&lt;n;++y)&#123;</span><br><span class="line">		<span class="keyword">if</span> (x!=y &amp;&amp; !(g[x][y] &amp;&amp; g[y][x]))&#123;</span><br><span class="line">			<span class="keyword">if</span> (col[y]&gt;<span class="number">0</span> &amp;&amp; col[x]==col[y]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span> (!col[y] &amp;&amp; !dfs(y,<span class="number">3</span>-c)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">	idx=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">		<span class="keyword">if</span> (!col[i])&#123;</span><br><span class="line">			<span class="keyword">if</span> (!dfs(i,<span class="number">1</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			d[idx]=(<span class="keyword">int</span>)vec[idx][<span class="number">0</span>].size()-(<span class="keyword">int</span>)vec[idx][<span class="number">1</span>].size();</span><br><span class="line">			idx++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> sum)</span></span>&#123;</span><br><span class="line">	<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; v1,v2;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=idx<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">		<span class="keyword">bool</span> flag;</span><br><span class="line">		<span class="keyword">if</span> (f[i][sum-d[i]+n])&#123;</span><br><span class="line">			flag=<span class="number">0</span>;sum-=d[i];</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			flag=<span class="number">1</span>;sum+=d[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;(<span class="keyword">int</span>)vec[i][flag].size();++j) v1.push_back(vec[i][flag][j]);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;(<span class="keyword">int</span>)vec[i][!flag].size();++j) v2.push_back(vec[i][!flag][j]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> siz1=(<span class="keyword">int</span>)v1.size(),siz2=(<span class="keyword">int</span>)v2.size();</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;(siz1<span class="number">-1</span>)*siz1/<span class="number">2</span>+(siz2<span class="number">-1</span>)*siz2/<span class="number">2</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">char</span> ch=getchar();</span><br><span class="line">	<span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span> || ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=-f;</span><br><span class="line">		ch=getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (ch&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">		x=x*<span class="number">10</span>+ch<span class="number">-48</span>;</span><br><span class="line">		ch=getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	freopen(<span class="string">&quot;b.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">	freopen(<span class="string">&quot;b.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">	n=read();<span class="keyword">int</span> m=read();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">		<span class="keyword">int</span> x=read()<span class="number">-1</span>,y=read()<span class="number">-1</span>;</span><br><span class="line">		g[x][y]=g[y][x]=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (n==<span class="number">1</span>) <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (!build()) <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		f[<span class="number">0</span>][n]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j=-n;j&lt;=n;++j)&#123;</span><br><span class="line">				<span class="keyword">if</span> (f[i][j+n])&#123;</span><br><span class="line">					f[i+<span class="number">1</span>][j+d[i]+n]=f[i+<span class="number">1</span>][j-d[i]+n]=<span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;++i)&#123;</span><br><span class="line">			<span class="keyword">if</span> (f[idx][i+n])&#123;</span><br><span class="line">				print(i);<span class="keyword">break</span>;</span><br><span class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span> (f[idx][n-i])&#123;</span><br><span class="line">				print(-i);<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	fclose(<span class="built_in">stdin</span>);</span><br><span class="line">	fclose(<span class="built_in">stdout</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><h3 id="题面-2"><a href="#题面-2" class="headerlink" title="题面"></a>题面</h3><p>有一张无向图，每条边有两个值 $s_i$ 和 $g_i$。你有若干个银子和若干个金子，当且仅当银子数大于等于 $s_i$，金子数大于等于 $g_i$ 时，第 $i$ 条边可用（否则这条边消失）。每个银子 $S$ 代价，每个金子 $G$ 代价。问至少需要付出多少代价才能让图连通。</p>
<p>$n\leq 200,m\leq 50000$。</p>
<h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>如果确定了金子的值，则银子的值就是原图删去那些金子不足的边之后，剩下的图的最小生成树的最大银子边权。</p>
<p>故从小到大枚举金子数等于哪条边的需求，相当于每次往图中加一条边，求它的最小生成树。</p>
<p>lct 或者暴力找环均能维护。</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200010</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">const</span> LL inf=<span class="number">0x3f3f3f3f3f3f3f3f</span>LL;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson(x) son[x][0]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson(x) son[x][1]</span></span><br><span class="line"><span class="keyword">int</span> f[N],fa[N],son[N][<span class="number">2</span>],maxx[N],stk[N],val[N];</span><br><span class="line"><span class="keyword">bool</span> rev[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v,x,y;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Edge &amp;a) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x&lt;a.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;E[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> rson(fa[x])==x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isroot</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> lson(fa[x])!=x &amp;&amp; rson(fa[x])!=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    rev[x]^=<span class="number">1</span>;swap(lson(x),rson(x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    maxx[x]=x;</span><br><span class="line">    <span class="keyword">if</span> (lson(x) &amp;&amp; val[maxx[lson(x)]]&gt;val[maxx[x]]) maxx[x]=maxx[lson(x)];</span><br><span class="line">    <span class="keyword">if</span> (rson(x) &amp;&amp; val[maxx[rson(x)]]&gt;val[maxx[x]]) maxx[x]=maxx[rson(x)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (rev[x]) reverse(lson(x)),reverse(rson(x)),rev[x]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y=fa[x],z=fa[y],k=get(x);</span><br><span class="line">    !isroot(y) &amp;&amp; (son[z][get(y)]=x),fa[x]=z;</span><br><span class="line">    son[y][k]=son[x][!k],fa[son[x][!k]]=y;</span><br><span class="line">    son[x][!k]=y,fa[y]=x;</span><br><span class="line">    pushup(y);pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u=x,tp=<span class="number">0</span>;stk[++tp]=u;</span><br><span class="line">    <span class="keyword">while</span> (!isroot(u)) stk[++tp]=u=fa[u];</span><br><span class="line">    <span class="keyword">while</span> (tp) pushdown(stk[tp--]);</span><br><span class="line">    <span class="keyword">while</span> (!isroot(x))&#123;</span><br><span class="line">        <span class="keyword">int</span> y=fa[x];</span><br><span class="line">        <span class="keyword">if</span> (!isroot(y)) rotate(get(x)==get(y)?y:x);</span><br><span class="line">        rotate(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> y=<span class="number">0</span>;x;x=fa[y=x]) splay(x),rson(x)=y,pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeroot</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    access(x),splay(x),reverse(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    makeroot(x),access(y),splay(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    makeroot(x),fa[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    split(x,y),fa[x]=lson(y)=<span class="number">0</span>,pushup(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f[x]==x?x:f[x]=find(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">multiset</span> &lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">char</span> ch=getchar();</span><br><span class="line">	<span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span> || ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=-f;</span><br><span class="line">		ch=getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (ch&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">		x=x*<span class="number">10</span>+ch<span class="number">-48</span>;</span><br><span class="line">		ch=getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	freopen(<span class="string">&quot;c.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">	freopen(<span class="string">&quot;c.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">	<span class="keyword">int</span> n=read(),m=read(),G=read(),S=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">    	E[i].u=read();E[i].v=read();E[i].x=read();E[i].y=read();</span><br><span class="line">    &#125;</span><br><span class="line">	sort(E+<span class="number">1</span>,E+<span class="number">1</span>+m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) f[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) val[i+n]=E[i].y;</span><br><span class="line">    LL ans=inf;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> u=E[i].u,v=E[i].v;</span><br><span class="line">        <span class="keyword">if</span> (u==v) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (find(u)==find(v))&#123;</span><br><span class="line">            split(u,v);</span><br><span class="line">            <span class="keyword">int</span> j=maxx[v]-n;</span><br><span class="line">            <span class="keyword">if</span> (E[j].y&lt;=E[i].y) <span class="keyword">continue</span>;</span><br><span class="line">            s.erase(s.find(E[j].y));</span><br><span class="line">			s.insert(E[i].y);</span><br><span class="line">            cut(E[j].u,j+n);cut(E[j].v,j+n);</span><br><span class="line">            link(u,i+n);link(v,i+n);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            f[find(u)]=find(v);</span><br><span class="line">            s.insert(E[i].y);</span><br><span class="line">            link(u,i+n);link(v,i+n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">int</span>)s.size()==n<span class="number">-1</span>)&#123;</span><br><span class="line">            ans=min(ans,<span class="number">1L</span>L*E[i].x*G+<span class="number">1L</span>L*(*s.rbegin())*S);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans==inf?<span class="number">-1</span>:ans);</span><br><span class="line">    fclose(<span class="built_in">stdin</span>);</span><br><span class="line">    fclose(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="D"><a href="#D" class="headerlink" title="D"></a>D</h2><p>咕咕咕。</p>
]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>提高模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>20/12/13 五校联考</title>
    <url>/2020/12/13/201213/</url>
    <content><![CDATA[<p>ehzeux 与球/ehzeux 与圆周/ehzeux 与宠物猪</p>
<a id="more"></a>
<h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p>原题：arc073c</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>分类讨论。</p>
<p>钦定把最大的球染成红色。分类讨论。</p>
<p>不妨设 $x_i\leq y_i$。</p>
<p>如果最小的球也是红色，则 $r_{max}-r_{min}$ 就确定了。将所有的盒子按照 $x$ 从小到大排序，显然最优解一定是取一开始的一段取 $y$ 涂蓝 ，剩下的取 $x$ 涂蓝。</p>
<p>如果最小的球是蓝色，那么显然必定是将所有的 $y$ 涂成红色，所有的 $x$ 涂成蓝色。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">char</span> ch=getchar();</span><br><span class="line">	<span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span> || ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=-f;</span><br><span class="line">		ch=getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (ch&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">		x=x*<span class="number">10</span>+ch<span class="number">-48</span>;</span><br><span class="line">		ch=getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pt</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> x,y;</span><br><span class="line">&#125;a[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(pt a,pt b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a.x&lt;b.x; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> maxp[N],minp[N];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	freopen(<span class="string">&quot;ball.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">	freopen(<span class="string">&quot;ball.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">	<span class="keyword">int</span> n=read(),minx=inf,miny=inf,maxx=<span class="number">0</span>,maxy=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		a[i].x=read();a[i].y=read();</span><br><span class="line">		<span class="keyword">if</span> (a[i].x&gt;a[i].y) swap(a[i].x,a[i].y);</span><br><span class="line">		minx=min(minx,a[i].x);</span><br><span class="line">		miny=min(miny,a[i].y);</span><br><span class="line">		maxx=max(maxx,a[i].x);</span><br><span class="line">		maxy=max(maxy,a[i].y);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> ans=(maxx-minx)*(maxy-miny);</span><br><span class="line">	sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n,cmp);</span><br><span class="line">	miny=a[<span class="number">1</span>].x;maxp[<span class="number">0</span>]=<span class="number">0</span>;minp[<span class="number">0</span>]=inf;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		maxp[i]=max(maxp[i<span class="number">-1</span>],a[i].y);</span><br><span class="line">		minp[i]=min(minp[i<span class="number">-1</span>],a[i].y);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> res=inf;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=n;i&gt;=<span class="number">2</span>;--i)&#123;</span><br><span class="line">		res=min(res,max(maxp[i<span class="number">-1</span>],a[n].x)-min(minp[i],a[i].x));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;min(ans,(maxy-miny)*res)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	fclose(<span class="built_in">stdin</span>);</span><br><span class="line">	fclose(<span class="built_in">stdout</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><h3 id="题面-1"><a href="#题面-1" class="headerlink" title="题面"></a>题面</h3><p>原题：agc028d</p>
<h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>不会。咕咕咕。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="keyword">int</span> g[N],f[N][N],p[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x+y&gt;=mod?x+y-mod:x+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x-y&lt;<span class="number">0</span>?x-y+mod:x-y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1L</span>L*x*y%mod; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">char</span> ch=getchar();</span><br><span class="line">	<span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span> || ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=-f;</span><br><span class="line">		ch=getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (ch&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">		x=x*<span class="number">10</span>+ch<span class="number">-48</span>;</span><br><span class="line">		ch=getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	freopen(<span class="string">&quot;circle.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">	freopen(<span class="string">&quot;circle.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">	<span class="keyword">int</span> n=read()&lt;&lt;<span class="number">1</span>,m=read(),ans=<span class="number">0</span>;</span><br><span class="line">	g[<span class="number">0</span>]=<span class="number">1</span>;<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i+=<span class="number">2</span>) g[i]=mul(g[i<span class="number">-2</span>],i<span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">		<span class="keyword">int</span> x=read(),y=read();p[x]=y;p[y]=x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j+=<span class="number">2</span>)&#123;</span><br><span class="line">			<span class="keyword">int</span> flag=<span class="number">1</span>,cnt=j-i+<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k=i;k&lt;=j;++k)&#123;</span><br><span class="line">				<span class="keyword">if</span> (p[k])&#123;</span><br><span class="line">					cnt--;</span><br><span class="line">					<span class="keyword">if</span> (p[k]&lt;i || p[k]&gt;j) flag=<span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (!flag) <span class="keyword">continue</span>;</span><br><span class="line">			f[i][j]=g[cnt];<span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k=j;k&gt;i;--k)&#123;</span><br><span class="line">				sum+=!p[k];f[i][j]=sub(f[i][j],mul(f[i][k<span class="number">-1</span>],g[sum]));</span><br><span class="line">			&#125;</span><br><span class="line">			ans=add(ans,mul(f[i][j],g[n<span class="number">-2</span>*m-cnt]));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	fclose(<span class="built_in">stdin</span>);</span><br><span class="line">	fclose(<span class="built_in">stdout</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><h3 id="题面-2"><a href="#题面-2" class="headerlink" title="题面"></a>题面</h3><p>原题：agc034d</p>
<h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>把曼哈顿距离的绝对值拆了。</p>
<p>发现一个匹配的贡献就是：</p>
<script type="math/tex; mode=display">
\max(x_1+y_1-x_2-y_2,x_1-y_1-x_2+y_2,-x_1+y_1+x_2-y_2,-x_1-y_1+x_2+y_2)</script><p>搞四个中转点。</p>
<p>原点向所有的白猪连边，流量 $z_i$ 费用 $0$。</p>
<p>每个白猪向四个中转点连边，流量 $z_i$ 费用 $\pm x_i\pm y_i$。</p>
<p>四个中转点向每个黑猪连边，流量 $z_i$ 费用 $-(\pm x_i\pm y_i)$。</p>
<p>所有的黑猪向汇点连边，流量 $z_i$ 费用 $0$。</p>
<p>最大费用最大流。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">40010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x3f3f3f3f3f3f3f3f</span>LL;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">char</span> ch=getchar();</span><br><span class="line">	<span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span> || ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=-f;</span><br><span class="line">		ch=getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (ch&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">		x=x*<span class="number">10</span>+ch<span class="number">-48</span>;</span><br><span class="line">		ch=getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> etot=<span class="number">1</span>,ea[N&lt;&lt;<span class="number">2</span>],eb[N&lt;&lt;<span class="number">2</span>],ec[N],ed[N&lt;&lt;<span class="number">2</span>],ef[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pointList</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">apply</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> ++cnt;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;pt;</span><br><span class="line"><span class="keyword">int</span> ans,dis[N],S,T,maxflow,a[N],b[N],c[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[<span class="number">4</span>]=&#123;<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">	<span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dis));</span><br><span class="line">	dis[S]=<span class="number">0</span>;vis[S]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;q.push(S);</span><br><span class="line">	<span class="keyword">while</span> (!q.empty())&#123;</span><br><span class="line">		<span class="keyword">int</span> x=q.front();q.pop();</span><br><span class="line">		vis[x]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=ec[x];i;i=eb[i])&#123;</span><br><span class="line">			<span class="keyword">int</span> y=ea[i];</span><br><span class="line">			<span class="keyword">if</span> (dis[y]&gt;dis[x]+ed[i] &amp;&amp; ef[i])&#123;</span><br><span class="line">				dis[y]=dis[x]+ed[i];</span><br><span class="line">				<span class="keyword">if</span> (!vis[y])&#123;</span><br><span class="line">					q.push(y);vis[y]=<span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dis[T]!=inf; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> flow)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x==T)&#123;</span><br><span class="line">		vis[T]=<span class="number">1</span>;maxflow+=flow;</span><br><span class="line">		<span class="keyword">return</span> flow;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> used=<span class="number">0</span>;</span><br><span class="line">	vis[x]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=ec[x];i;i=eb[i])&#123;</span><br><span class="line">		<span class="keyword">int</span> y=ea[i];</span><br><span class="line">		<span class="keyword">if</span> ((!vis[y] || y==T) &amp;&amp; ef[i] &amp;&amp; dis[y]==dis[x]+ed[i])&#123;</span><br><span class="line">			<span class="keyword">int</span> delta=dfs(y,min(flow-used,ef[i]));</span><br><span class="line">			<span class="keyword">if</span> (delta!=<span class="number">0</span>)&#123;</span><br><span class="line">				ans+=ed[i]*delta;ef[i]-=delta;ef[i^<span class="number">1</span>]+=delta;used+=delta;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (used==flow) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> used;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mcmf</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (spfa())&#123;</span><br><span class="line">		vis[T]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span> (vis[T])&#123;</span><br><span class="line">			<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">			dfs(S,inf);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> f,<span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line">	etot++;ea[etot]=y;eb[etot]=ec[x];ec[x]=etot;ed[etot]=z;ef[etot]=f;</span><br><span class="line">	etot++;ea[etot]=x;eb[etot]=ec[y];ec[y]=etot;ed[etot]=-z;ef[etot]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	freopen(<span class="string">&quot;pig.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">	freopen(<span class="string">&quot;pig.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">	<span class="keyword">int</span> n=read();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) a[i]=pt.apply();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) b[i]=pt.apply();</span><br><span class="line">	S=pt.apply();T=pt.apply();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;++i) c[i]=pt.apply();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		<span class="keyword">int</span> x=read(),y=read(),z=read();</span><br><span class="line">		addEdge(S,a[i],z,<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">4</span>;++k) addEdge(a[i],c[k],z,dx[k]*x+dy[k]*y);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		<span class="keyword">int</span> x=read(),y=read(),z=read();</span><br><span class="line">		addEdge(b[i],T,z,<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">4</span>;++k) addEdge(c[k],b[i],z,-dx[k]*x-dy[k]*y);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;-mcmf()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	fclose(<span class="built_in">stdin</span>);</span><br><span class="line">	fclose(<span class="built_in">stdout</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>五校联考</tag>
        <tag>省选模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>项目汇集</title>
    <url>/2020/12/13/items/</url>
    <content><![CDATA[<p>小型项目/控制台项目汇集</p>
<a id="more"></a>
<p><b><font color=red>这些项目均已无限期停止更新。</font></b></p>
<p><strong>如果需要源代码进行研究（甚至帮助更新），请通过邮箱 realZombie462@gmail.com 联系作者。</strong></p>
<ul>
<li><p>TowerDefence</p>
<p>使用 vc6.0 和 easyx 库编写的简单塔防游戏。</p>
<font color=green>该项目已经完成。</font>

<p>最新版本 <a href="https://zombie462.github.io/items/towerdefence.zip">点击下载</a></p>
</li>
<li><p>Minecraft 2d (c++ game)</p>
<p>使用 vc6.0 和 easyx 库编写的简单平面沙盒游戏。</p>
<p>最新版本 <a href="https://zombie462.github.io/items/minecraft2d.zip">点击下载</a></p>
</li>
<li><p>Plant revenge 系列</p>
<p>使用 pascal 编写的简单控制台游戏。（早年作品）</p>
<p>同时有 c++ 重写后的版本。（只是开了个头）</p>
<p>最新版本 <a href="https://zombie462.github.io/items/pr2.zip">点击下载</a></p>
<p>额外版本 <a href="https://zombie462.github.io/items/pr3.zip">点击下载</a></p>
</li>
<li><p>魔塔 50 层（c++ game）</p>
<p>使用 c++ 编写的简单控制台游戏（更新进度 15/50 层）。 </p>
<p>最新版本 <a href="https://zombie462.github.io/items/mota50.zip">点击下载</a></p>
</li>
<li><p>烈焰编辑器</p>
<p>使用 vb 编写的没啥用的一个神奇语言的代码编辑器。（早年作品）</p>
<p>编译系统由 pascal 完成。</p>
<p>最新版本 <a href="https://zombie462.github.io/items/flame_editor.zip">点击下载</a></p>
</li>
<li><p>一些更为差劲的项目</p>
<ul>
<li><p>SpecialGame</p>
<p>一个塔防游戏的雏形。</p>
<p>使用 vc6.0 和 easyx 编写。</p>
<p>最新版本 <a href="https://zombie462.github.io/items/specialgame.zip">点击下载</a></p>
</li>
<li><p>Adventure 系列</p>
<p>灰都不剩的渣作。</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>项目</tag>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>PVZ (c++ game)</title>
    <url>/2020/12/13/pvz/</url>
    <content><![CDATA[<p>PVZ (c++ game) - 最新版本 v1.0.4</p>
<a id="more"></a>
<p><b><font color=red>本项目已无限期停止更新。</font></b></p>
<p>PVZ (c++ game) 是一款使用 vc6.0 编写、采用 easyx 图形库的植物大战僵尸游戏。</p>
<p>具体信息详见各个版本目录下的 <code>readme.md</code> 文件。</p>
<p>下载地址：</p>
<p>v1.0.4 <a href="https://zombie462.github.io/PVZ v1.0.4.zip">点击下载</a></p>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>项目</tag>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>Zjudge</title>
    <url>/2020/12/12/zjudge/</url>
    <content><![CDATA[<p>Zjudge - 最新版本 v1.3.0</p>
<a id="more"></a>
<p><b><font color=red>本项目已无限期停止更新。</font></b></p>
<p>Zjudge 是一款基于控制台的程序评测系统。</p>
<p>具体信息详见各个版本目录下的 <code>readme.txt</code> 文件。</p>
<p><strong>注意：旧版本将不会得到维护。</strong></p>
<p>下载地址：</p>
<p>v1.1.0 <a href="https://zombie462.github.io/items/Zjudge v1.1.0.zip">点击下载</a></p>
<p>v1.1.1 <a href="https://zombie462.github.io/items/Zjudge v1.1.1.zip">点击下载</a></p>
<p>v1.1.2 <a href="https://zombie462.github.io/items/Zjudge v1.1.2.zip">点击下载</a></p>
<p>v1.2.0 <a href="https://zombie462.github.io/items/Zjudge v1.2.0.zip">点击下载</a></p>
<p>v1.3.0 <a href="https://zombie462.github.io/items/Zjudge v1.3.0.zip">点击下载</a></p>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>音乐列表</title>
    <url>/2020/12/12/music_list/</url>
    <content><![CDATA[<p>神的随波逐流（yousa）</p>
<audio controls>
  <source src="https://cdn.jsdelivr.net/gh/zombie462/zombie462.github.io/items/music1.mp3" type="audio/mp3">
</audio>
]]></content>
      <categories>
        <category>音频</category>
      </categories>
      <tags>
        <tag>音频</tag>
      </tags>
  </entry>
  <entry>
    <title>薄的随波逐流</title>
    <url>/2020/12/12/bo_de_sui_bo_zhu_liu/</url>
    <content><![CDATA[<p>薄的随波逐流.mp4</p>
<a id="more"></a>
<video controls="" autoplay="" name="media"><source src="https://zombie462.github.io/items/video_2.mp4" type="video/mp4"></video>]]></content>
      <categories>
        <category>视频</category>
      </categories>
      <tags>
        <tag>视频</tag>
      </tags>
  </entry>
  <entry>
    <title>秦城欢迎你</title>
    <url>/2020/12/12/qin_cheng_huan_ying_ni/</url>
    <content><![CDATA[<p>秦城欢迎你.mp4</p>
<a id="more"></a>
<video controls="" autoplay="" name="media"><source src="https://zombie462.github.io/items/video_1.mp4" type="video/mp4"></video>]]></content>
      <categories>
        <category>视频</category>
      </categories>
      <tags>
        <tag>视频</tag>
      </tags>
  </entry>
</search>
